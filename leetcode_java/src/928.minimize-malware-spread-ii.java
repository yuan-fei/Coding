/*
 * @lc app=leetcode id=928 lang=java
 *
 * [928] Minimize Malware Spread II
 *
 * https://leetcode.com/problems/minimize-malware-spread-ii/description/
 *
 * algorithms
 * Hard (42.85%)
 * Likes:    626
 * Dislikes: 87
 * Total Accepted:    19.6K
 * Total Submissions: 45.7K
 * Testcase Example:  '[[1,1,0],[1,1,0],[0,0,1]]\n[0,1]'
 *
 * You are given a network of n nodes represented as an n x n adjacency matrix
 * graph, where the i^th node is directly connected to the j^th node if
 * graph[i][j] == 1.
 * 
 * Some nodes initial are initially infected by malware. Whenever two nodes are
 * directly connected, and at least one of those two nodes is infected by
 * malware, both nodes will be infected by malware. This spread of malware will
 * continue until no more nodes can be infected in this manner.
 * 
 * Suppose M(initial) is the final number of nodes infected with malware in the
 * entire network after the spread of malware stops.
 * 
 * We will remove exactly one node from initial, completely removing it and any
 * connections from this node to any other node.
 * 
 * Return the node that, if removed, would minimize M(initial). If multiple
 * nodes could be removed to minimize M(initial), return such a node with the
 * smallest index.
 * 
 * 
 * Example 1:
 * Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
 * Output: 0
 * Example 2:
 * Input: graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]
 * Output: 1
 * Example 3:
 * Input: graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]
 * Output: 1
 * 
 * 
 * Constraints:
 * 
 * 
 * n == graph.length
 * n == graph[i].length
 * 2 <= n <= 300
 * graph[i][j] is 0 or 1.
 * graph[i][j] == graph[j][i]
 * graph[i][i] == 1
 * 1 <= initial.length <Â n
 * 0 <= initial[i] <= n - 1
 * All the integers in initial are unique.
 * 
 * 
 */

// @lc code=start
class Solution {
    int[][] g;
    Set<Integer> initials = new HashSet<>();
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        g = new int[n][n];
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                g[i][j] = graph[i][j];
            }
        }
        Arrays.sort(initial);
        for(int i : initial){
            initials.add(i);
        }
        int ans = -1;
        int minAffectedNo = n + 1;
        for(int i : initial){
            initials.remove(i);
            for(int u = 0; u < n; u++){
                g[i][u] = 0;
                g[u][i] = 0;
            }

            int affectedNo = getInfectedNo();
            // System.out.println(i + ": " + affectedNo);
            if(affectedNo < minAffectedNo){
                minAffectedNo = affectedNo;
                ans = i;
            }
            
            for(int u = 0; u < n; u++){
                g[i][u] = graph[i][u];
                g[u][i] = graph[u][i];
            }
            

            initials.add(i);
        }
        return ans;
    }

    int getInfectedNo(){
        int n = g.length;
        boolean[] seen = new boolean[n];
        for(int i: initials){
            if(!seen[i]){
                dfs(i, seen);
            }
        }
        // System.out.println(Arrays.toString(seen));
        int ans = 0;
        for(boolean s : seen){
            if(s){
                ans++;
            }
        }
        return ans;
    }

    void dfs(int u, boolean[] seen){
        seen[u] = true;
        for(int v = 0; v < g[u].length; v++){
            if(g[u][v] == 1 && !seen[v]){
                dfs(v, seen);
            }
        }
    }
}
// @lc code=end
